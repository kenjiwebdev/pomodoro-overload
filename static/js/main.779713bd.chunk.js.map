{"version":3,"sources":["audio/switch.mp3","components/Header.js","components/BackgroundColor.js","components/PomodoroButton.js","components/TaskCard.js","components/Timer.js","components/SetTimer.js","components/PomodoroStatistics.js","components/CountPomodoro.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","popover","Popover","id","Title","as","Content","style","fontSize","Header","OverlayTrigger","trigger","placement","overlay","BackgroundColor","state","background","handleChangeComplete","color","setState","hex","document","body","backgroundColor","className","this","onChangeComplete","React","Component","PomodoroButton","props","pomodoroRunning","onBreak","Button","size","onClick","startPomdoro","variant","cancelPomodoro","pomodoroCompleted","shortBreakPomdoro","longBreakPomdoro","TaskCard","editTask","defaultTask","handleChange","event","textValue","target","value","storeTaskLocalStorage","task","addTaskArr","ls","set","taskArr","changeTask","length","alert","Card","width","Body","Text","onChange","marginBottom","tick","UIfx","tickAudio","volume","throttleMs","Timer","playAudio","play","key","date","ref","myRef","daysInHours","autoStart","onTick","onComplete","completedPomdoro","SetTimer","useState","show","setShow","num1","setNum1","num2","setNum2","num3","setNum3","checkInputIsNum","numArr","every","curr","convertToMillisecond","mapArr","map","num","Modal","onHide","closeButton","Footer","editTimerDefault","arrSetting","editTimer","PomodoroStatistics","handleClose","centered","localTaskArr","get","displayPomodoroTask","resetLocalStorage","CountPomodoro","spinner","Spinner","animation","spinnerArr","count","onDoubleClick","restartCount","height","margin","border","i","push","showPomdoroCount","App","current","start","pause","Date","now","mainTimer","shortTimer","updateLocalCountStorage","longTimer","require","clear","tempNum","createRef","bind","isCompleted","Container","Row","Col","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uGAAAA,EAAOC,QAAU,IAA0B,oC,wMCQrCC,EACJ,kBAACC,EAAA,EAAD,CAASC,GAAG,iBACV,kBAACD,EAAA,EAAQE,MAAT,CAAeC,GAAG,MAAK,gEACvB,kBAACH,EAAA,EAAQI,QAAT,CACAC,MAAO,CAAEC,SAAU,WADnB,6RAsBWC,MAZf,WACC,OACC,kBAACC,EAAA,EAAD,CACEC,QAAS,CAAC,QAAS,SACnBC,UAAU,SACVC,QAASZ,GAEV,mD,SCGYa,E,4MA1BbC,MAAQ,CACPC,WAAY,W,EAGbC,qBAAuB,SAACC,GACvB,EAAKC,SAAS,CAAEH,WAAYE,EAAME,MACjCC,SAASC,KAAKf,MAAMgB,gBAAkB,EAAKR,MAAMC,Y,uDAIjD,OACE,yBAAKQ,UAAU,WAChB,kBAAC,eAAD,CACCN,MAAQO,KAAKV,MAAMC,WACnBU,iBAAmBD,KAAKR,4B,GAfAU,IAAMC,W,OC0BrBC,E,uKAxBb,OACC,8BACIJ,KAAKK,MAAMC,kBAAoBN,KAAKK,MAAME,SAC5C,kBAACC,EAAA,EAAD,CAAQT,UAAU,gBAAgBU,KAAK,KAAKC,QAASV,KAAKK,MAAMM,aAChEC,QAAQ,aADR,mBAECZ,KAAKK,MAAMC,iBACZ,kBAACE,EAAA,EAAD,CAAQT,UAAU,gBAAgBU,KAAK,KAAKC,QAASV,KAAKK,MAAMQ,eAChED,QAAQ,aADR,qBAEEZ,KAAKK,MAAMC,iBAAmBN,KAAKK,MAAME,UACvCP,KAAKK,MAAMS,mBACf,kBAACN,EAAA,EAAD,CAAQT,UAAU,gBAAgBU,KAAK,KAAIC,QAASV,KAAKK,MAAMU,kBAC/DH,QAAQ,aADR,iBAGEZ,KAAKK,MAAMC,iBAAmBN,KAAKK,MAAMS,mBAC3C,kBAACN,EAAA,EAAD,CAAQT,UAAU,gBAAgBU,KAAK,KAAKC,QAASV,KAAKK,MAAMW,iBAChEJ,QAAQ,aADR,oB,GAhBwBV,IAAMC,W,yBC2EpBc,E,kDAxEd,WAAYZ,GAAQ,IAAD,8BAClB,cAAMA,IAQPa,SAAW,WACV,EAAKxB,SAAS,CAACyB,aAAa,KAVV,EAanBC,aAAe,SAACC,GACf,EAAK3B,SAAS,CAAC4B,UAAWD,EAAME,OAAOC,SAdrB,EAiBnBC,sBAAwB,SAACC,GACxB,EAAKrB,MAAMsB,WAAWD,GACtBE,IAAGC,IAAI,gBAAiB,EAAKxB,MAAMyB,UAnBjB,EAsBnBC,WAAa,WACiB,KAAzB,EAAKzC,MAAMgC,WACd,EAAK5B,SAAS,CAACgC,KAAM,sBACrB,EAAKhC,SAAS,CAACyB,aAAa,IAC5B,EAAKzB,SAAS,CAAC4B,UAAW,MAChB,EAAKhC,MAAMgC,UAAUU,OAAS,KACxCC,MAAM,4CACN,EAAKvC,SAAS,CAACgC,KAAM,sBACrB,EAAKhC,SAAS,CAACyB,aAAa,IAC5B,EAAKzB,SAAS,CAAC4B,UAAW,OAE1B,EAAK5B,SAAS,CAACgC,KAAM,EAAKpC,MAAMgC,YAChC,EAAKG,sBAAsB,EAAKnC,MAAMgC,WACtC,EAAK5B,SAAS,CAACyB,aAAa,IAC5B,EAAKzB,SAAS,CAAC4B,UAAW,OAlC3B,EAAKhC,MAAQ,CACZoC,KAAM,oBACNP,aAAa,EACbG,UAAW,IALM,E,qDAyCnB,OACC,kBAACY,EAAA,EAAD,CACEnC,UAAU,+BACVjB,MAAO,CAAEqD,MAAO,UAEjB,kBAACD,EAAA,EAAKlD,OAAN,cACA,kBAACkD,EAAA,EAAKE,KAAN,KACA,kBAACF,EAAA,EAAKG,KAAN,CAAWtC,UAAU,aACdC,KAAKV,MAAMoC,MAEf,+BACG1B,KAAKV,MAAM6B,aACZ,8BACAK,MAAOxB,KAAKV,MAAMgC,UAClBgB,SAAUtC,KAAKoB,aACftC,MAAO,CAAEyD,aAAc,WAGxBvC,KAAKV,MAAM6B,YAER,kBAACX,EAAA,EAAD,CAAQI,QAAQ,QAAQF,QAASV,KAAKkB,SAAUnB,UAAU,YAA1D,aADA,kBAACS,EAAA,EAAD,CAAQI,QAAQ,QAAQF,QAASV,KAAK+B,WAAYhC,UAAU,YAA5D,gB,GA7DaG,IAAMC,W,6CCAvBqC,EAAO,IAAIC,IAChBC,IACA,CACCC,OAAQ,EACRC,WAAY,KA4BCC,E,4MArBdC,UAAY,WACXN,EAAKO,KAAK,K,uDAIV,OACC,yBAAKhD,UAAU,SACb,kBAAC,IAAD,CACAiD,IAAKhD,KAAKK,MAAM4C,KAChBC,IAAKlD,KAAKK,MAAM8C,MAChBF,KAAMjD,KAAKK,MAAM4C,KACjBG,aAAa,EACbC,WAAW,EACXC,OAAQtD,KAAK8C,UACbS,WAAYvD,KAAKK,MAAMmD,wB,GAhBRtD,IAAMC,W,iCC4EXsD,MAlFf,SAAkBpD,GAAQ,IAAD,EACAH,IAAMwD,UAAS,GADf,mBACjBC,EADiB,KACXC,EADW,OAKC1D,IAAMwD,SAAS,GALhB,mBAKhBG,EALgB,KAKVC,EALU,OAMC5D,IAAMwD,SAAS,GANhB,mBAMhBK,EANgB,KAMVC,EANU,OAOC9D,IAAMwD,SAAS,GAPhB,mBAOhBO,EAPgB,KAOVC,EAPU,KA0BfC,EAAkB,WAAgB,IAAD,uBAAXC,EAAW,yBAAXA,EAAW,gBACtC,SAAIA,EAAOC,OAAM,SAAAC,GAAI,MAAoB,kBAATA,OAC3BF,EAAOC,OAAM,SAAAC,GAAI,OAAIA,EAAO,GAAKA,EAAO,SAOxCC,EAAuB,WAAgB,IAAD,uBAAXH,EAAW,yBAAXA,EAAW,gBAC1C,IAAMI,EAASJ,EAAOK,KAAI,SAAAC,GAAG,OAAU,IAANA,KACjC,OAAOF,GAGZ,OACC,6BACE,kBAAChE,EAAA,EAAD,CACAT,UAAU,cACVa,QAAQ,eACRH,KAAK,KACLC,QA3CiB,kBAAMkD,GAAQ,KAuC/B,YASA,kBAACe,EAAA,EAAD,CAAOhB,KAAMA,EAAMiB,OAjDF,kBAAMhB,GAAQ,KAkD1B,kBAACe,EAAA,EAAM3F,OAAP,CAAc6F,aAAW,GACpB,kBAACF,EAAA,EAAMhG,MAAP,iCAEL,kBAACgG,EAAA,EAAMvC,KAAP,KACC,uDACA,6BACD,0CACE,kBAAC,IAAD,CAAaZ,MAAOqC,EAAMvB,SAAUwB,KAEtC,kBAACa,EAAA,EAAMvC,KAAP,KACA,iDACE,kBAAC,IAAD,CAAaZ,MAAOuC,EAAMzB,SAAU0B,KAEtC,kBAACW,EAAA,EAAMvC,KAAP,KACA,gDACE,kBAAC,IAAD,CAAaZ,MAAOyC,EAAM3B,SAAU4B,KAEtC,kBAACS,EAAA,EAAMG,OAAP,KACE,kBAACtE,EAAA,EAAD,CAAQI,QAAQ,YAAYF,QAjDR,WACzBkD,GAAQ,GACRvD,EAAM0E,qBA+CD,oBAGA,kBAACvE,EAAA,EAAD,CAAQI,QAAQ,UAAUF,QAhET,WAGtB,GAFAkD,GAAQ,GAEJO,EAAgBN,EAAME,EAAME,GAAO,CACrC,IAAMe,EAAaT,EAAqBV,EAAME,EAAME,GACpD5D,EAAM4E,UAAN,MAAA5E,EAAK,YAAc2E,SAEjB/C,MAAM,wBACN5B,EAAM0E,qBAwDL,oBCJIG,MAnEf,SAA6B7E,GAAQ,IAAD,EACXqD,oBAAS,GADE,mBAC5BC,EAD4B,KACtBC,EADsB,KAG7BuB,EAAc,kBAAMvB,GAAQ,IA4B/B,OACC,6BACC,kBAACpD,EAAA,EAAD,CACFT,UAAU,YACVa,QAAQ,eACRH,KAAK,KACLC,QAjCgB,kBAAMkD,GAAQ,KA6B5B,SASH,kBAACe,EAAA,EAAD,CAAOhB,KAAMA,EAAMiB,OAAQO,EAAa1E,KAAK,KAAK2E,UAAQ,GACnD,kBAACT,EAAA,EAAM3F,OAAP,CAAc6F,aAAW,GACvB,kBAACF,EAAA,EAAMhG,MAAP,wBAGH,kBAACgG,EAAA,EAAMvC,KAAP,uBAEC,wBAAIrC,UAAU,sBAtCM,WAC1B,IAAMsF,EAAezD,IAAG0D,IAAI,iBAC5B,OAAqB,OAAjBD,EACK,iDAEaA,EAAaZ,KAAI,SAAC/C,GAAD,OACrC,4BAAKA,MAiCA6D,IAED,6BA5B0B,OAA5B3D,IAAG0D,IAAI,iBACH,mBAEA,kBAAN,OAAyB1D,IAAG0D,IAAI,mBA6B7B,kBAACX,EAAA,EAAMG,OAAP,KACA,kBAACtE,EAAA,EAAD,CAAQI,QAAQ,YAAYF,QAnDf,WAClByE,IACA9E,EAAMmF,sBAiDD,a,SCrCMC,MA3Bf,SAAuBpF,GACtB,IAAIqF,EAAU,kBAACC,EAAA,EAAD,CAASC,UAAU,SAC7BC,EAAa,GASjB,OACC,yBAAK7C,IAAK3C,EAAMyF,MAChBC,cAAe1F,EAAM2F,aACrBlH,MAAO,CACNgB,gBAAiB,OACjBqC,MAAO,QACP8D,OAAQ,OACRC,OAAQ,OACR3D,aAAc,OACd4D,OAAQ,oBAhBV,SAA0BzB,GACzB,IAAK,IAAI0B,EAAI,EAAGA,EAAI1B,EAAK0B,IACxBP,EAAWQ,KAAKX,GAEjB,OAAOG,EAcLS,CAAiBjG,EAAMyF,S,2BCqKZS,E,kDA7Kd,WAAYlG,GAAQ,IAAD,8BAClB,cAAMA,IA4BPM,aAAe,WACd,EAAKjB,SAAS,CAACY,iBAAiB,IAChC,EAAK6C,MAAMqD,QAAQC,SA/BD,EAkCnB5F,eAAiB,WACS,IAArB,EAAKvB,MAAMwG,OACd,EAAKpG,SAAS,CAACoG,MAAO,IACtB,EAAKpG,SAAS,CAACoB,mBAAmB,IAClC,EAAKpB,SAAS,CAACY,iBAAiB,IAChC,EAAKZ,SAAS,CAACa,SAAS,IACxB,EAAK4C,MAAMqD,QAAQE,QACnB,EAAKhH,SAAS,CAACuD,KAAM0D,KAAKC,MAAQ,EAAKtH,MAAMuH,cAE7C,EAAKnH,SAAS,CAACY,iBAAiB,IAChC,EAAKZ,SAAS,CAACa,SAAS,IACxB,EAAK4C,MAAMqD,QAAQE,QACnB,EAAKhH,SAAS,CAACuD,KAAM0D,KAAKC,MAAQ,EAAKtH,MAAMuH,cA9C5B,EAkDnBrD,iBAAmB,WACO,IAArB,EAAKlE,MAAMwG,OAAgB,EAAKxG,MAAMiB,QAOV,IAArB,EAAKjB,MAAMwG,OACrB,EAAKpG,SAAS,CAACY,iBAAiB,IAChC,EAAKZ,SAAS,CAACa,SAAS,IACxB,EAAKb,SAAS,CAACoG,MAAO,IACtB,EAAKpG,SAAS,CAACoB,mBAAmB,IAClC,EAAKpB,SAAS,CAACuD,KAAM0D,KAAKC,MAAQ,EAAKtH,MAAMuH,aAClC,EAAKvH,MAAMiB,SAOtB,EAAKb,SAAS,CAACY,iBAAiB,IAChC,EAAKZ,SAAS,CAACuD,KAAM0D,KAAKC,MAAQ,EAAKtH,MAAMuH,YAC7C,EAAKnH,SAAS,CAACa,SAAS,MARxB,EAAKb,SAAS,CAACY,iBAAiB,IAChC,EAAKZ,SAAS,CAACa,SAAS,IACxB,EAAKb,SAAS,CAACoG,MAAO,EAAKxG,MAAMwG,MAAQ,IACzC,EAAKpG,SAAS,CAACuD,KAAM0D,KAAKC,MAAQ,EAAKtH,MAAMwH,aAC7C,EAAKC,4BAjBL,EAAKrH,SAAS,CAACY,iBAAiB,IAChC,EAAKZ,SAAS,CAACa,SAAS,IACxB,EAAKb,SAAS,CAACoG,MAAO,EAAKxG,MAAMwG,MAAQ,IACzC,EAAKpG,SAAS,CAACoB,mBAAmB,IAClC,EAAKpB,SAAS,CAACuD,KAAM0D,KAAKC,MAAQ,EAAKtH,MAAM0H,YAC7C,EAAKD,4BAzDY,EA6EnBhG,kBAAoB,WACnB,EAAKrB,SAAS,CAACY,iBAAiB,IAChC,EAAK6C,MAAMqD,QAAQC,SA/ED,EAkFnBzF,iBAAmB,WAClB,EAAKtB,SAAS,CAACY,iBAAiB,IAChC,EAAK6C,MAAMqD,QAAQC,SApFD,EAuFnBT,aAAe,WACd/D,MAAM,qBACN,EAAKvC,SAAS,CAACoG,MAAO,IACtB,EAAKjF,kBA1Fa,EA6FnBoE,UAAY,SAACpB,EAAME,EAAME,GACxB,EAAKvE,SAAS,CAACmH,UAAWhD,IAC1B,EAAKnE,SAAS,CAACoH,WAAY/C,IAC3B,EAAKrE,SAAS,CAACsH,UAAW/C,IAC1BhC,MAAM,qBACN,EAAKvC,SAAS,CAACoG,MAAO,IACtB,EAAKjF,kBAnGa,EAsGnBkE,iBAAmB,WAClB,EAAKrF,SAAS,CAACmH,UAAW,OAC1B,EAAKnH,SAAS,CAACoH,WAAY,MAC3B,EAAKpH,SAAS,CAACsH,UAAW,MAC1B/E,MAAM,mCACN,EAAKvC,SAAS,CAACoG,MAAO,IACtB,EAAKjF,kBA5Ga,EA+GnB2E,kBAAoB,WACnB,IAAI5D,EAAKqF,EAAQ,IACjB,EAAKvH,SAAS,CAACoC,QAAS,KACxBF,EAAGsF,QACHtF,EAAG,gBAAiB,IAnHF,EAsHnBmF,wBAA0B,WACzB,IAAII,EAAUvF,IAAG0D,IAAI,iBACrB6B,IACAvF,IAAGC,IAAI,gBAAiBsF,IAzHN,EA4HnBxF,WAAa,SAACD,GACb,EAAKpC,MAAMwC,QAAQuE,KAAK3E,IA3HxB,EAAKyB,MAAQjD,IAAMkH,YAChB,EAAKX,MAAQ,EAAKA,MAAMY,KAAX,gBAChB,EAAK/H,MAAQ,CACZwG,MAAO,EACPxF,iBAAiB,EACjBQ,mBAAmB,EACnBP,SAAS,EACT0C,KAAM0D,KAAKC,MAAQ,KACnBC,UAAW,KACXC,WAAY,IACZE,UAAW,IACXlF,QAAS,IAbQ,E,oDAkBlB9B,KAAKmD,MAAMqD,QAAQC,U,8BAInBzG,KAAKmD,MAAMqD,QAAQE,U,oCAInB1G,KAAKmD,MAAMqD,QAAQc,gB,+BAuGnB,OACC,6BACA,kBAACC,EAAA,EAAD,CAAWxH,UAAU,eACpB,kBAACyH,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,KACC,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CACA9F,WAAY3B,KAAK2B,WACjBG,QAAS9B,KAAKV,MAAMwC,UAEpB,kBAAC,EAAD,CACAgE,MAAO9F,KAAKV,MAAMwG,MAClBE,aAAchG,KAAKgG,eAEnB,kBAAC,EAAD,CACAxC,iBAAkBxD,KAAKwD,iBACvBL,MAAOnD,KAAKmD,MACZF,KAAMjD,KAAKV,MAAM2D,OAEjB,kBAAC,EAAD,CACA3C,gBAAiBN,KAAKV,MAAMgB,gBAC5BQ,kBAAmBd,KAAKV,MAAMwB,kBAC9BH,aAAcX,KAAKW,aACnBE,eAAgBb,KAAKa,eACrBE,kBAAmBf,KAAKe,kBACxBC,iBAAkBhB,KAAKgB,iBACvBT,QAASP,KAAKV,MAAMiB,aAKvB,kBAAC,EAAD,CACA0E,UAAWjF,KAAKiF,UAChBF,iBAAkB/E,KAAK+E,mBAEvB,kBAAC,EAAD,CACAS,kBAAmBxF,KAAKwF,yB,GAvKTtF,IAAMC,W,OCLJuH,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,kBAAC,EAAD,MACFpI,SAASqI,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.779713bd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/switch.a3778d58.mp3\";","import React from 'react';\r\nimport Popover from 'react-bootstrap/Popover'\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\r\n\r\n/*\r\nHeader Component handles the main header title and Pomodoro tooltip. \r\nThe tooltip allows users to have a quick info on Pomodoro technique.\r\n*/\r\nconst popover = (\r\n  <Popover id=\"popover-basic\">\r\n    <Popover.Title as=\"h3\"><strong>What is Pomodoro Technique?</strong></Popover.Title>\r\n    <Popover.Content \r\n    style={{ fontSize: '1.1rem'}}>\r\n      The Pomodoro Technique is a time management system that encourages people to work with \r\n      the time they have rather than against it. You break your workday into\r\n      25-minute chunks separated by five-minute breaks. \r\n      After about four pomodoros, you take a longer break of about 15 minutes.\r\n    </Popover.Content>\r\n  </Popover>\r\n);\r\n\r\nfunction Header() {\r\n\treturn (\r\n\t\t<OverlayTrigger \r\n    trigger={[\"hover\", \"focus\"]} \r\n    placement=\"bottom\" \r\n    overlay={popover}\r\n    >\r\n\t\t\t<h1>Pomodoro Overload</h1>\r\n\t\t</OverlayTrigger>\r\n\t\t)\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { GithubPicker } from 'react-color';\r\n\r\n//Handles the logic of changing the background color, allows the user to choose his prefer background color.\r\nclass BackgroundColor extends React.Component {\r\n  state = {\r\n  \tbackground: '#FF0000'\r\n  };\r\n\r\n  handleChangeComplete = (color) => {\r\n  \tthis.setState({ background: color.hex});\r\n    document.body.style.backgroundColor = this.state.background;\r\n  };\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"bg-comp\">\r\n    \t<GithubPicker \r\n    \t color={ this.state.background }\r\n    \t onChangeComplete={ this.handleChangeComplete }\r\n    \t/>\r\n      </div>\r\n    \t)\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default BackgroundColor;","import React from 'react';\r\nimport Button from 'react-bootstrap/Button'\r\n\r\n//All important button element in a single child component so that the parent component has less code.\r\nclass PomodoroButton extends React.Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{ !this.props.pomodoroRunning && !this.props.onBreak &&\r\n\t\t\t\t\t<Button className=\"pomodoro-btns\" size=\"lg\" onClick={this.props.startPomdoro} \r\n\t\t\t\t\tvariant=\"secondary\">Start Pomodoro </Button>}\r\n\t\t\t\t{ this.props.pomodoroRunning &&\r\n\t\t\t\t\t<Button className=\"pomodoro-btns\" size=\"lg\" onClick={this.props.cancelPomodoro}\r\n\t\t\t\t\tvariant=\"secondary\">Cancel Pomodoro </Button>}\r\n\t\t\t\t{ !this.props.pomodoroRunning && this.props.onBreak \r\n\t\t\t\t\t&& !this.props.pomodoroCompleted &&\r\n\t\t\t\t\t<Button className=\"pomodoro-btns\" size=\"lg\"onClick={this.props.shortBreakPomdoro}\r\n\t\t\t\t\tvariant=\"secondary\">Short Break </Button>\r\n\t\t\t\t}\r\n\t\t\t\t{ !this.props.pomodoroRunning && this.props.pomodoroCompleted &&\r\n\t\t\t\t\t<Button className=\"pomodoro-btns\" size=\"lg\" onClick={this.props.longBreakPomdoro}\r\n\t\t\t\t\tvariant=\"secondary\">Long Break </Button>\r\n\t\t\t\t}\r\n\t\t\t</div>\t\r\n\t\t)\r\n\t}\r\n} \r\n\r\n\r\n\r\nexport default PomodoroButton;","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ls from 'local-storage';\r\n\r\n// Task Card Component handles the logic on how to change and edit the user Pomodoro task card.\r\nclass TaskCard extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\ttask: \"Focus is the Key.\",\r\n\t\t\tdefaultTask: true,\r\n\t\t\ttextValue: '',\r\n\t\t}\r\n\t}\r\n\r\n\teditTask = () => {\r\n\t\tthis.setState({defaultTask: false})\r\n\t}\r\n\r\n\thandleChange = (event) => {    \r\n\t\tthis.setState({textValue: event.target.value});  \r\n\t}\r\n\r\n\tstoreTaskLocalStorage = (task) => {\r\n\t\tthis.props.addTaskArr(task);\r\n\t\tls.set(\"pomodoroTasks\", this.props.taskArr);\r\n\t}\r\n\r\n\tchangeTask = () => {\r\n\t\tif (this.state.textValue === \"\") {\r\n\t\t\tthis.setState({task: \"Focus is the Key.\"});  \r\n\t\t\tthis.setState({defaultTask: true})\r\n\t\t\tthis.setState({textValue: ''});  \r\n\t\t} else if (this.state.textValue.length > 100) {\r\n\t\t\talert(\"Please enter a maximum of 100 characters\")\r\n\t\t\tthis.setState({task: \"Focus is the Key.\"});  \r\n\t\t\tthis.setState({defaultTask: true})\r\n\t\t\tthis.setState({textValue: ''});  \r\n\t\t} else {\r\n\t\t\tthis.setState({task: this.state.textValue})\r\n\t\t\tthis.storeTaskLocalStorage(this.state.textValue)\r\n\t\t\tthis.setState({defaultTask: true})\r\n\t\t\tthis.setState({textValue: ''});  \r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\treturn (\r\n\t\t<Card\r\n\t\t\t className=\"bg-dark text-white card-task\"\r\n\t\t\t style={{ width: '20rem' }}\t\r\n\t\t>\r\n\t\t\t<Card.Header>Task:</Card.Header>\r\n\t\t\t<Card.Body>\r\n\t\t\t<Card.Text className=\"text-task\">\r\n      \t\t\t{this.state.task}\r\n   \t\t\t</Card.Text>\r\n   \t\t\t<form>\r\n   \t\t\t\t{!this.state.defaultTask && \r\n   \t\t\t\t\t<textarea \r\n   \t\t\t\t\tvalue={this.state.textValue} \r\n   \t\t\t\t\tonChange={this.handleChange}\r\n   \t\t\t\t\tstyle={{ marginBottom: '15px' }}/>\r\n   \t\t\t\t}\r\n\t\t\t</form>\r\n\t\t\t\t\t{!this.state.defaultTask\r\n   \t\t\t\t\t? <Button variant=\"light\" onClick={this.changeTask} className=\"task-btn\">Change</Button> \r\n   \t\t\t\t\t: <Button variant=\"light\" onClick={this.editTask} className=\"task-btn\">Edit Task</Button>\r\n   \t\t\t\t\t}\r\n\t\t\t</Card.Body>\r\n\t\t</Card>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\nexport default TaskCard;","import React from 'react';\r\nimport Countdown from 'react-countdown';\r\nimport UIfx from 'uifx'; \r\nimport tickAudio from '../audio/switch.mp3';\r\n\r\n//Contains Pomodoro countdown timer and the sound effects of the timer. Kept as a child component for less code to the main component\r\nconst tick = new UIfx(\r\n\ttickAudio, \r\n\t{\r\n\t\tvolume: 1,\r\n\t\tthrottleMs: 40\r\n\t}\r\n\t);\r\n\r\n\r\nclass Timer extends React.Component {\r\n\r\n\tplayAudio = () => {\r\n\t\ttick.play(0.1)\r\n\t}\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"timer\">\r\n\t\t\t\t <Countdown \r\n\t\t\t\t key={this.props.date}\r\n\t\t\t\t ref={this.props.myRef} \r\n\t\t\t\t date={this.props.date} \r\n\t\t\t\t daysInHours={true}\r\n\t\t\t\t autoStart={false}\r\n\t\t\t\t onTick={this.playAudio}\r\n\t\t\t\t onComplete={this.props.completedPomdoro}\r\n\t\t\t\t />\r\n\t\t\t</div>\t\r\n\t\t)\r\n\t}\r\n} \r\n\r\nexport default Timer;","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport InputNumber from 'react-input-number';\r\n\r\n/*\r\nSet Timer component for more customization, allows the user to edit/change the\r\ndefault countdown timer of Pomodoro for there liking.\r\n*/\r\nfunction SetTimer(props) {\r\n\tconst [show, setShow] = React.useState(false);\r\n\tconst handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  const [num1, setNum1] = React.useState(0);\r\n  const [num2, setNum2] = React.useState(0);\r\n  const [num3, setNum3] = React.useState(0);\r\n\r\n    const handleCloseEdit = () => {\r\n      setShow(false);\r\n\r\n      if (checkInputIsNum(num1, num2, num3)) {\r\n        const arrSetting = convertToMillisecond(num1, num2, num3)\r\n        props.editTimer(...arrSetting);\r\n      } else {\r\n          alert(\"Enter a valid number\");\r\n          props.editTimerDefault();\r\n      }\r\n    }\r\n\r\n    const handleCloseDefault = () => {\r\n      setShow(false);\r\n      props.editTimerDefault();\r\n    }\r\n\r\n    const checkInputIsNum = (...numArr) => {\r\n    \tif (numArr.every(curr => typeof curr === \"number\")) {\r\n    \t\tif (numArr.every(curr => curr > 0 && curr < 121)) {\r\n    \t\t\treturn true;\r\n    \t\t}\r\n    \t} \r\n    \treturn false;\r\n    }\r\n\r\n    const convertToMillisecond = (...numArr) => {\r\n      const mapArr = numArr.map(num => num * 60000);\r\n      return mapArr;\r\n    }\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t  <Button \r\n\t\t  className=\"setting-btn\" \r\n\t\t  variant=\"outline-dark\" \r\n\t\t  size=\"sm\"\r\n\t\t  onClick={handleShow}\r\n\t\t  >\r\n\t\t  Settings\r\n\t\t  </Button>\r\n\r\n\t\t  <Modal show={show} onHide={handleClose}>\r\n        \t<Modal.Header closeButton>\r\n              <Modal.Title>Pomodoro Timer Settings</Modal.Title>\r\n        \t</Modal.Header>\r\n        \t<Modal.Body>\r\n          <h5>Enter how many minutes:</h5>\r\n          <br/>\r\n        \t<p>Main Timer:</p>\r\n        \t\t <InputNumber value={num1} onChange={setNum1}/>\r\n        \t</Modal.Body>\r\n        \t<Modal.Body>\r\n        \t<p>Short Break Timer:</p>\r\n        \t\t <InputNumber value={num2} onChange={setNum2}/>\r\n        \t</Modal.Body>\r\n        \t<Modal.Body>\r\n        \t<p>Long Break Timer:</p>\r\n        \t\t <InputNumber value={num3} onChange={setNum3}/>\r\n        \t</Modal.Body>\r\n       \t\t<Modal.Footer>\r\n          \t<Button variant=\"secondary\" onClick={handleCloseDefault}>\r\n            Default Settings\r\n          \t</Button>\r\n          \t<Button variant=\"primary\" onClick={handleCloseEdit}>\r\n            Save Changes\r\n         \t</Button>\r\n       \t \t</Modal.Footer>\r\n     \t </Modal>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SetTimer;","import React from 'react';\r\nimport { useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport ls from 'local-storage'\r\n\r\n/*\r\nPomodoro Statistics Component allows the user to see the task s/he have done \r\nand the total ammount of Pomodoro s/he have finish.\r\n*/\r\n\r\nfunction PomodoroStatistics (props) {\r\n\tconst [show, setShow] = useState(false);\r\n\r\n\tconst handleClose = () => setShow(false);\r\n\tconst handleShow = () => setShow(true);\r\n\r\n  const handleClear = () => {\r\n    handleClose();\r\n    props.resetLocalStorage();\r\n  }\r\n\r\n  const displayPomodoroTask = () => {\r\n    const localTaskArr = ls.get(\"pomodoroTasks\");\r\n    if (localTaskArr === null) {\r\n      return <li>Focus is the key!</li>\r\n    } else {\r\n      const taskArrList = localTaskArr.map((task) =>\r\n      <li>{task}</li>\r\n      );\r\n      return taskArrList\r\n    }\r\n  }\r\n\r\n  const displayPomodoroCount = () => {\r\n    if (ls.get(\"pomodoroCount\") === null) {\r\n      return `Total Pomdoro: 0` \r\n    } else {\r\n      return `Total Pomdoro: ${ls.get(\"pomodoroCount\")}`\r\n    }\r\n  }\r\n\r\n    return (\r\n    \t<div>\r\n    \t <Button \r\n\t\t  className=\"stats-btn\" \r\n\t\t  variant=\"outline-dark\" \r\n\t\t  size=\"sm\"\r\n\t\t  onClick={handleShow}\r\n\t\t  >\r\n\t\t  Stats\r\n\t\t  </Button>\r\n\r\n\t\t <Modal show={show} onHide={handleClose} size=\"sm\" centered>\r\n         \t<Modal.Header closeButton>\r\n          \t\t<Modal.Title>Pomodoro Stats</Modal.Title>\r\n        \t</Modal.Header>\r\n\r\n        \t<Modal.Body>\r\n          Pomodoro Tasks:\r\n          <ul className=\"pomodoro-list-task\">\r\n          {displayPomodoroTask()}\r\n          </ul>\r\n          <br/>\r\n        \t{displayPomodoroCount()}\r\n        \t</Modal.Body>\r\n\r\n        \t<Modal.Footer>\r\n        \t<Button variant=\"secondary\" onClick={handleClear}>\r\n            Clear\r\n          \t</Button>\r\n          \t</Modal.Footer>\r\n      \t </Modal>\r\n\t\t \r\n\t\t</div>\r\n    \t)\r\n}\r\n\r\nexport default PomodoroStatistics;","import React from 'react';\r\nimport Spinner from 'react-bootstrap/Spinner'\r\n\r\n//Allows user to visually see  how many Pomodoro they have done.\r\nfunction CountPomodoro(props) {\r\n\tlet spinner = <Spinner animation=\"grow\" />\r\n\tlet spinnerArr = [];\r\n\r\n\tfunction showPomdoroCount(num) {\r\n\t\tfor (let i = 0; i < num; i++) {\r\n\t\t\tspinnerArr.push(spinner);\r\n\t\t}\r\n\t\treturn spinnerArr;\r\n\t}\r\n\t\r\n\treturn (\r\n\t\t<div key={props.count}\r\n\t\tonDoubleClick={props.restartCount}\r\n\t\tstyle={{ \r\n\t\t\tbackgroundColor: 'grey',\r\n\t\t\twidth: '150px',\r\n\t\t\theight: '35px',\r\n\t\t\tmargin: 'auto',\r\n\t\t\tmarginBottom: '10px',\r\n\t\t\tborder: '2px solid black'\r\n\t\t}}>\r\n\t\t\t{showPomdoroCount(props.count)}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default CountPomodoro;","import React from 'react';\r\nimport Header from './components/Header';\r\nimport BackgroundColor from './components/BackgroundColor';\r\nimport PomodoroButton from './components/PomodoroButton';\r\nimport TaskCard from './components/TaskCard';\r\nimport Timer from './components/Timer';\r\nimport SetTimer from './components/SetTimer';\r\nimport PomodoroStatistics from './components/PomodoroStatistics';\r\nimport CountPomodoro from './components/CountPomodoro';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport ls from 'local-storage'\r\n\r\n/*\r\nMain App Pomodoro Component, \r\nHandles all the state, functionality and core logic to run the Pomodoro.\r\n*/\r\n\r\nclass App extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.myRef = React.createRef();\r\n\t   \tthis.start = this.start.bind(this);\r\n\t\tthis.state = {\r\n\t\t\tcount: 0,\r\n\t\t\tpomodoroRunning: false,\r\n\t\t\tpomodoroCompleted: false,\r\n\t\t\tonBreak: false,\r\n\t\t\tdate: Date.now() + 1.5e+6,\r\n\t\t\tmainTimer: 1.5e+6,\r\n\t\t\tshortTimer: 300000,\r\n\t\t\tlongTimer: 900000,\r\n\t\t\ttaskArr: [],\r\n\t\t}\r\n\t}\r\n\r\n\tstart() {\r\n\t\tthis.myRef.current.start();\r\n\t}\r\n\r\n\tpause() {\r\n\t\tthis.myRef.current.pause();\r\n\t}\r\n\r\n\tisCompleted() {\r\n\t\tthis.myRef.current.isCompleted();\r\n\t}\r\n\r\n\tstartPomdoro = () => {\r\n\t\tthis.setState({pomodoroRunning: true});\r\n\t\tthis.myRef.current.start();\r\n\t}\r\n\r\n\tcancelPomodoro = () => {\r\n\t\tif (this.state.count === 4) {\r\n\t\t\tthis.setState({count: 0});\r\n\t\t\tthis.setState({pomodoroCompleted: false});\r\n\t\t\tthis.setState({pomodoroRunning: false});\r\n\t\t\tthis.setState({onBreak: false});\r\n\t\t\tthis.myRef.current.pause();\r\n\t\t\tthis.setState({date: Date.now() + this.state.mainTimer});\r\n\t\t} else {\r\n\t\t\tthis.setState({pomodoroRunning: false});\r\n\t\t\tthis.setState({onBreak: false});\r\n\t\t\tthis.myRef.current.pause();\r\n\t\t\tthis.setState({date: Date.now() + this.state.mainTimer});\r\n\t\t}\r\n\t}\r\n\r\n\tcompletedPomdoro = () => {\r\n\t\tif (this.state.count === 3 && !this.state.onBreak) {\r\n\t\t\tthis.setState({pomodoroRunning: false});\r\n\t\t\tthis.setState({onBreak: true});\r\n\t\t\tthis.setState({count: this.state.count + 1});\r\n\t\t\tthis.setState({pomodoroCompleted: true});\r\n\t\t\tthis.setState({date: Date.now() + this.state.longTimer});\r\n\t\t\tthis.updateLocalCountStorage();\r\n\t\t} else if (this.state.count === 4) {\r\n\t\t\tthis.setState({pomodoroRunning: false});\r\n\t\t\tthis.setState({onBreak: false});\r\n\t\t\tthis.setState({count: 0});\r\n\t\t\tthis.setState({pomodoroCompleted: false});\r\n\t\t\tthis.setState({date: Date.now() + this.state.mainTimer});\r\n\t\t} else if (!this.state.onBreak) {\r\n\t\t\tthis.setState({pomodoroRunning: false});\r\n\t\t\tthis.setState({onBreak: true});\r\n\t\t\tthis.setState({count: this.state.count + 1});\r\n\t\t\tthis.setState({date: Date.now() + this.state.shortTimer});\r\n\t\t\tthis.updateLocalCountStorage();\r\n\t\t} else {\r\n\t\t\tthis.setState({pomodoroRunning: false});\r\n\t\t\tthis.setState({date: Date.now() + this.state.mainTimer});\r\n\t\t\tthis.setState({onBreak: false});\r\n\t\t}\r\n\t}\r\n\r\n\tshortBreakPomdoro = () => {\r\n\t\tthis.setState({pomodoroRunning: true});\r\n\t\tthis.myRef.current.start();\r\n\t}\r\n\r\n\tlongBreakPomdoro = () => {\r\n\t\tthis.setState({pomodoroRunning: true});\r\n\t\tthis.myRef.current.start();\r\n\t}\r\n\r\n\trestartCount = () => {\r\n\t\talert(\"Pomdoro is reset!\")\r\n\t\tthis.setState({count: 0});\r\n\t\tthis.cancelPomodoro();\r\n\t}\r\n\r\n\teditTimer = (num1, num2, num3) => {\t\r\n\t\tthis.setState({mainTimer: num1});\r\n\t\tthis.setState({shortTimer: num2});\r\n\t\tthis.setState({longTimer: num3});\r\n\t\talert(\"Settings changed!\");\r\n\t\tthis.setState({count: 0});\r\n\t\tthis.cancelPomodoro();\r\n\t}\r\n\r\n\teditTimerDefault = () => {\r\n\t\tthis.setState({mainTimer: 1.5e+6});\r\n\t\tthis.setState({shortTimer: 300000});\r\n\t\tthis.setState({longTimer: 900000});\r\n\t\talert(\"Settings are change to default!\");\r\n\t\tthis.setState({count: 0});\r\n\t\tthis.cancelPomodoro();\r\n\t}\r\n\r\n\tresetLocalStorage = () => {\r\n\t\tvar ls = require('local-storage');\r\n\t\tthis.setState({taskArr: []});\r\n\t\tls.clear();\r\n\t\tls(\"pomodoroCount\", 0);\r\n\t}\r\n\r\n\tupdateLocalCountStorage = () => {\r\n\t\tlet tempNum = ls.get(\"pomodoroCount\");\r\n\t\ttempNum++\r\n\t\tls.set(\"pomodoroCount\", tempNum);\r\n\t}\r\n\r\n\taddTaskArr = (task) => {\r\n\t\tthis.state.taskArr.push(task);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t<Container className=\"text-center\">\r\n\t\t\t\t<Row>\r\n\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t<Header />\r\n\t\t\t\t\t\t<BackgroundColor />\r\n\t\t\t\t\t\t<TaskCard \r\n\t\t\t\t\t\taddTaskArr={this.addTaskArr}\r\n\t\t\t\t\t\ttaskArr={this.state.taskArr}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<CountPomodoro \r\n\t\t\t\t\t\tcount={this.state.count}\r\n\t\t\t\t\t\trestartCount={this.restartCount}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Timer \r\n\t\t\t\t\t\tcompletedPomdoro={this.completedPomdoro}\r\n\t\t\t\t\t\tmyRef={this.myRef}\r\n\t\t\t\t\t\tdate={this.state.date}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<PomodoroButton \r\n\t\t\t\t\t\tpomodoroRunning={this.state.pomodoroRunning}\r\n\t\t\t\t\t\tpomodoroCompleted={this.state.pomodoroCompleted}\r\n\t\t\t\t\t\tstartPomdoro={this.startPomdoro}\r\n\t\t\t\t\t\tcancelPomodoro={this.cancelPomodoro}\r\n\t\t\t\t\t\tshortBreakPomdoro={this.shortBreakPomdoro}\r\n\t\t\t\t\t\tlongBreakPomdoro={this.longBreakPomdoro}\r\n\t\t\t\t\t\tonBreak={this.state.onBreak}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t</Row>\r\n\t\t\t</Container>\r\n\t\t\t<SetTimer \r\n\t\t\teditTimer={this.editTimer}\r\n\t\t\teditTimerDefault={this.editTimerDefault}\r\n\t\t\t/>\r\n\t\t\t<PomodoroStatistics \r\n\t\t\tresetLocalStorage={this.resetLocalStorage}\r\n\t\t\t/>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n} \r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}